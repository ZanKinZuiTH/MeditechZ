version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: meditechz-backend
    restart: always
    volumes:
      - ./backend:/app
      - ./ai_models:/app/ai_models
      - ./storage:/app/storage
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - meditechz-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: meditechz-frontend
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - meditechz-network
    command: npm run dev

  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: meditechz-postgres
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE:-meditechz}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    networks:
      - meditechz-network

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: meditechz-redis
    restart: always
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    networks:
      - meditechz-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: meditechz-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - meditechz-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: meditechz-grafana
    restart: always
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - meditechz-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  meditechz-network:
    driver: bridge 